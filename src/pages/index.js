import Head from "next/head";
import { Plus_Jakarta_Sans } from "@next/font/google";
const pjsfont = Plus_Jakarta_Sans({ subsets: ["latin"] });

import { postData } from "@/utils";
import { useState } from "react";
import Navbar from "@/components/Navbar";
import Layout from "@/components/Layout";
import ClipboardCopy from "@/components/ClipboardCopy";
import Footer from "@/components/Footer";
import OpenNewTab from "@/components/OpenNewTab";

export default function Home() {
  const [url, seturl] = useState("");
  const [shortUrl, setShortUrl] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleClick = async (e) => {
    setLoading(true);
    setError("");
    setShortUrl("");
    try {
      const res = await postData("/api/v1/url/create", {
        originalUrl: `${url}`,
      });
      setTimeout(() => {
        setShortUrl(
          `${process.env.NEXT_PUBLIC_BASE_URL}/${res.data.result.urlId}`
        );
        setLoading(false);
      }, 5000);
    } catch (error) {
      setTimeout(() => {
        setError(error.response?.data?.error || "Something went wrong");
        setLoading(false);
      }, 5000);
    }
    e.preventDefault();
  };

  return (
    <>
      <Head>
        <title>TrollLink</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`${pjsfont.className} min-h-screen bg-gradient-to-br from-slate-100 to-transparent selection:bg-red-400 selection:text-white`}
      >
        <Layout>
          <Navbar />
          <header>
            <div className="mt-20">
              <h1 className="text-center text-4xl font-extrabold text-redGuy">
                Make your URL Shorter !
              </h1>
              <p className="mx-auto mt-1 text-center font-light">
                TrollLink is a random link personalization tool that enable to
                make your life more troll.
              </p>
            </div>
            <div className="mx-auto mt-14 w-full overflow-hidden px-4 py-4 md:w-6/12 md:py-2">
              <div className="flex flex-col justify-between gap-4 md:flex-row">
                <input
                  className="focus:border:white w-full bg-transparent focus:border-b focus:border-redGuy focus:outline-none"
                  type="text"
                  placeholder="Paste a link to shorten it"
                  onChange={(e) => {
                    seturl(e.target.value);
                  }}
                />
                <button
                  className={`px rounded-xl bg-redGuy px-4 py-4 font-light text-white transition-all duration-300 ease-in-out hover:bg-red-900 ${
                    loading && "disabled cursor-not-allowed"
                  }`}
                  onClick={handleClick}
                  disabled={loading}
                >
                  Shorten
                </button>
              </div>
            </div>

            {/* Result */}
            <div className="mx-auto mt-10">
              {loading && (
                <div className="flex justify-center gap-4">
                  <p className="text-center text-2xl font-extrabold text-redGuy">
                    Loading...
                  </p>
                </div>
              )}
              {shortUrl && (
                <>
                  <div className="mx-auto mt-14 w-full overflow-hidden rounded-lg border-2 border-redGuy px-4 py-4 md:w-6/12 md:py-2">
                    <div className="flex flex-row flex-wrap justify-between gap-2">
                      <p className="flex cursor-grab select-all items-center">
                        {shortUrl}
                      </p>
                      <div className="flex flex-row">
                        <ClipboardCopy text={shortUrl} targetUrl={shortUrl} />
                        <OpenNewTab targetUrl={shortUrl} />
                      </div>
                    </div>
                  </div>
                </>
              )}
              {error && (
                <div className="flex justify-center gap-4">
                  <p className="text-center text-2xl font-extrabold text-redGuy">
                    {error}
                  </p>
                </div>
              )}
            </div>
          </header>
          <Footer />
        </Layout>
      </main>
    </>
  );
}
